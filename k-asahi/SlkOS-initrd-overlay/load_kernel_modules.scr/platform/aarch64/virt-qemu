###############################################################################
# Helper script: /load_kernel_modules.scr/platform/aarch64/virt-qemu
# Purpose......: Set the Kernel modules for the QEMU emulated virtual
#                Hardware Models, within the Slackware initial RAM disk
#                ('OS initrd') and the Slackware installer.
#                This script is sourced from '/load_kernel_modules'
#
# Important Note:
# * You must _append_ to the module lists (as this script does)
#   otherwise the base set of modules will not be loaded and would result in
#   a Kernel panic.
# * The initrd uses the 'bash' shell, rather than 'busybox'
#   (as in upstream/x86 Slackware). This allows you (for example)
#   to use 'fallthrough' (case statements terminated with ';&'
#   rather than ';;') within case statements and regular expression
#   matches within 'if' statements.
#   This permits the 'c'-style switch statements where you can
#   'inherit' the previous matches as you move down the cases.
#   This enables you to match on varients of boards, and inherit
#   a 'baseline' of platform modules for that board.
#
# The 'PLATWALK' match is to enable build scripts to process these
# scripts outside of the initrd environment and determine which
# modules will be loaded by a particular Hardware Model.  This must remain
# in place for all scripts.
###############################################################################

# The QEMU Hardware Model does not provide a /proc/device-tree/model interface
# so 'dmidecode' is used.

# As an example, $HWM might contain the string:
# "QEMU Virtual Machine virt-7.2"
#
# If you want to make distinctions based on the version of QEMU (perhaps to set/
# unset particular modules), refer to the "rk3399" loader template.
# There's also a variable '$HWM_sysver' which may contain the version/revision
# of the Hardware Model.  For example, on QEMU it may contain 'virt-7.2'.
# This makes it easier to match on particular versions, but you can also use
# $HWM since $HWM_sysver is appended to the end of the string.
case $HWM in
   "QEMU Virtual Machine"*|PLATWALK)
      platform_detected=1
      SOC_NAME=virt-qemu
      # Set the short name that is used by /load_kernel_modules to install
      # the appropriate configuration for modprobe for this Hardware Model:
      # These files are stored within the source tree:
      # source/k/SlkOS-initrd-overlay/usr/share/hwm-configure/platform/aarch64/modprobe.d/
      #
      # Note: Typically these are only used to blacklist particular modules from loading
      # within the OS InitRD or Installer.  Within the OS the regular location of
      # /lib/modprobe.d/ is used and has no connection to the content of the
      # OS InitRD/Installer.
      HWM_SHORTNAME=virt-qemu

      echo "Architecture: ${ARCH}, Hardware model: ${HWM}, SoC: ${SOC_NAME}"
      # If one of the modules within the base list is causing problems on
      # your platform, here are the options laid out as examples:
      # USB="${USB/ehci_orion/differentmodule}" # Substitute module 'ehci_orion' with 'differentmodule'
      # USB="${USB/ehci_orion/}" # Remove the 'ehci_orion' module from the list
      MOD_GPIO+="   "
      # Drivers for PCI and other core sub systems:
      MOD_PHY+="    pci-host-generic"
      # Video/display drivers:
      MOD_VIDEO+="  bochs"
      # MFD (Multi Functional Devices) drivers:
      MOD_MFD+="    "
      # For SDHC/MMC storage:
      MOD_CARDS+="  "
      # Drivers for USB hardware for this particular Hardware Model:
      MOD_USB+="    "
      # Ethernet network driver:
      MOD_NET+="    "
      # Any modules related to compression/decompression and cryptography
      MOD_CMP+="    "
      MOD_CRYPTO+=" "
      # Example to detect hardware at runtime:
      #{ lspci 2>/dev/null | grep -q 'SATA cont.*ATA' ;} && MOD_XX="$MOD_XX yyy"

      # The following modules do not inherit from the parent loader '/load_kernel_modules'
      #MOD_RTC="rtc_XYZ"
      # Modules for the peripherals on the Hardware Model's main board
      # (outside of the SoC itself)
      MOD_HWM=""
      # Modules for the IP blocks/peripherals embedded within the SoC:
      #MOD_SOC="i2c-XYZ"

      # Define a function to run from the OS InitRD's '/init' immediately prior
      # to switching into the Slackware OS proper.
      # This is after any software RAID arrays et al have been initialised.
      # There's no current use case for this, but it may be useful in the future.
      #
      # At this stage, the following paths for Slackware OS are mounted:
      # /proc, /sys, /run, /dev
      # The root file system ('/') is mounted under /mnt
      #
      #function hwm_hook_pre_switch_root() {
      #  echo "Just about to switch into the Slackware OS proper, leaving the OS InitRD"
      #  sleep 4
      #}
      ;;
esac

# The '/load_kernel_modules' script will load the modules
# set above.
